# @package _global_

defaults:
  - /habitat_baselines: finetune_imagenav_baselines_rl_config_base
  - /habitat_baselines/rl/policy/obs_transforms@habitat_baselines.rl.policy.main_agent.obs_transforms.resize_shortest_edge: resize_shortest_edge_base
  - imagenav_stretch_hm3d_inr_collision
  - _self_

habitat:
  simulator:
    type: "Sim-v0" # Should this be RearrangeSim?
  environment:
    iterator_options:
      max_scene_repeat_steps: 50000
  task:
    success_reward: 5.0
    slack_reward: -1e-3


habitat_baselines:
  verbose: False
  trainer_name: "ddppo"
  torch_gpu_id: 0
  tensorboard_dir: "tb"
  video_dir: "video_dir"
  test_episode_count: -1
  eval_ckpt_path_dir: "data/new_checkpoints"
  num_environments: 4
  checkpoint_folder: "data/new_checkpoints"
  num_updates: 27000
  total_num_steps: -1
  log_interval: 10
  num_checkpoints: 400
  # Force PyTorch to be single threaded as
  # this improves performance considerably
  force_torch_single_threaded: True
  # rollout_storage_name: "CustomRolloutStorage"

  rl:
    policy:
      main_agent:
        name: "ImageNavPolicy"
        obs_transforms:
          resize_shortest_edge:
            size: 120
            trans_keys: [rgb, depth, semantic, image_goal_rotation]
        rnn_type: "LSTM"
        num_recurrent_layers: 2
        use_augmentations: True
        use_augmentations_test_time: True
        normalize_visual_inputs: False
        freeze_backbone: False

    ppo:
      # ppo params
      clip_param: 0.2
      ppo_epoch: 2
      num_mini_batch: 2
      value_loss_coef: 0.5
      entropy_coef: 0.01
      lr: 2.5e-6
      encoder_lr: 6e-7
      adamw_weight_decay: 1e-6
      eps: 1e-5
      max_grad_norm: 0.2
      num_steps: 64
      use_gae: True
      gamma: 0.99
      tau: 0.95
      use_linear_clip_decay: False
      use_linear_lr_decay: False
      reward_window_size: 50

      use_normalized_advantage: False

      hidden_size: 512

      # Use double buffered sampling, typically helps
      # when environment time is similar or larger than
      # policy inference time during rollout generation
      use_double_buffered_sampler: False

    ddppo:
      sync_frac: 0.6
      # The PyTorch distributed backend to use
      distrib_backend: NCCL
      # Visual encoder backbone
      pretrained_weights: data/ddppo-models/gibson-2plus-resnet50.pth
      # Initialize with pretrained weights
      pretrained: False
      # Initialize just the visual encoder backbone with pretrained weights
      pretrained_encoder: False
      # Whether the visual encoder backbone will be trained.
      train_encoder: True
      # Whether to reset the critic linear layer
      reset_critic: True

      # Model parameters
      backbone: resnet50_clip_avgpool
      rnn_type: LSTM
      num_recurrent_layers: 2